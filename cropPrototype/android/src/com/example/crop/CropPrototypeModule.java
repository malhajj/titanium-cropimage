/**
 * This file was auto-generated by the Titanium Module SDK helper for Android
 * Appcelerator Titanium Mobile
 * Copyright (c) 2009-2010 by Appcelerator, Inc. All Rights Reserved.
 * Licensed under the terms of the Apache Public License
 * Please see the LICENSE included with this distribution for details.
 *
 */
package com.example.crop;

import org.appcelerator.kroll.KrollObject;
import org.appcelerator.kroll.KrollFunction;
import org.appcelerator.kroll.KrollModule;
import org.appcelerator.kroll.KrollDict;
import org.appcelerator.kroll.annotations.Kroll;
import org.appcelerator.kroll.common.Log;
import org.appcelerator.kroll.common.TiConfig;

import org.appcelerator.titanium.TiApplication;
import org.appcelerator.titanium.TiBlob;
import org.appcelerator.titanium.view.TiDrawableReference;
import org.appcelerator.titanium.util.TiActivityResultHandler;
import org.appcelerator.titanium.util.TiActivitySupport;

import com.android.camera.CropImageIntentBuilder;

import android.app.Activity;
import android.content.Intent;
import android.net.Uri;

import java.io.File;
import java.nio.file.Files;

@Kroll.module(name="CropPrototype", id="com.example.crop")
public class CropPrototypeModule extends KrollModule
{
	// Standard Debugging variables
    private static final String LCAT = "CropPrototypeModule"; 
    private static final boolean DBG = TiConfig.LOGD;

    /** 
     * Default constructor
     * */
    public CropPrototypeModule() { super(); }

    /** 
     * Use to crop an image selected.  
     * Returns are processed via callbacks that handle a single object
     * @param srcFileUrl    The picture file that should be cropped.
     * @param overwrite     If True, the srcFile supplied will be overwritten by the cropped one.
     * @param callbacks     Titanium callbacks that will handle function ends;
     *      Two function are expected, identified with key "success" and "error".
     * */
    @Kroll.method public void cropImage(String srcFileUrl, boolean overwrite, KrollDict callbacks) 
    {
        CropResultHandler cropResultHandler = new CropResultHandler(callbacks);
        try {
            if(DBG) Log.d(LCAT, "Starting cropImage");

            /* Verify the input */
            Uri srcFileUri = Uri.parse(srcFileUrl);

            /* Define the output URI*/ 
            Uri destFileUri = srcFileUri;
            if (!overwrite) {
              String filename = ( new File(srcFileUri.toString()) ).getName();
              destFileUri = Uri.parse(srcFileUrl.replaceFirst(filename, "cropped_" + filename));
            }
            
            if(DBG) {
                Log.d(LCAT, "Source file : " + srcFileUri.toString());
                Log.d(LCAT, "Destination file : " + destFileUri.toString());
            }

            /* Initialize the intent for the crop activity */
            CropImageIntentBuilder intentBuilder = new CropImageIntentBuilder(200, 200, destFileUri); 
            intentBuilder.setOutlineColor(0xFF03A9F4); // Should be exported in a conf/init method
            intentBuilder.setSourceImage(srcFileUri);

            /* Get the current activity and call the intent */
            Activity mainActivity = TiApplication.getAppCurrentActivity(); 
            TiActivitySupport mainActivitySupport = (TiActivitySupport) mainActivity;
            mainActivitySupport.launchActivityForResult(
                intentBuilder.getIntent(mainActivity),
                mainActivitySupport.getUniqueResultCode(), 
                cropResultHandler); 

        } catch (Exception e) {
            cropResultHandler.handleError(e);
        }
    }

    protected class CropResultHandler implements TiActivityResultHandler
    {
        private KrollFunction successCallback, errorCallback;
        private KrollDict callbackArgs; 

        public CropResultHandler(KrollDict callbacks){
            /* Declare all callbacks for further purpose */
            successCallback  = (KrollFunction) callbacks.get("success"); 
            errorCallback    = (KrollFunction) callbacks.get("error");
            callbackArgs = new KrollDict(); 
        }

        public void handleError(Exception e)
        {
            if(DBG) Log.d(LCAT, "An error has occured");
            callbackArgs.put("message", e.getMessage());
            errorCallback.callAsync((KrollObject) errorCallback, callbackArgs);
        }
   
        public void onError(Activity activity, int requestCode, Exception e) 
        {
          handleError(e);
        }

        public void onResult(Activity activity, int requestCode, int resultCode, Intent data)
        {
            if (resultCode == Activity.RESULT_CANCELED) {
                handleError(new Exception("Crop has been aborted by the User"));  
                return;
            }

            callbackArgs.put("imagePath", data.getAction()); 
            successCallback.callAsync((KrollObject) successCallback, callbackArgs); 
        }
    }
}
